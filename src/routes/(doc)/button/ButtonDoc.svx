<script lang="ts">
  import SectionTitle from '$doc/components/SectionTitle.svelte';
  import PropRow from '$doc/components/PropRow.svelte';
  import CodeInline from '$doc/components/CodeInline.svelte';
  import Table from '$lib/components/table/Table.svelte';
  import Alert from '$lib/components/alert/Alert.svelte';
</script>

<SectionTitle title="Quick start" noTopMargin />

Simply import and use the `Button` component with the desired text inside.

```svelte example
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button>Click me</Button>
```

<SectionTitle title="Color" />

You can customize the color of the button by using the `color` prop. By default,
the button uses the `neutral` color.

<SectionTitle subSection title="Brand colors" />

DaisyUI offers 3 brand colors: `primary`, `secondary` and `accent`.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button color="primary">Primary</Button>
<Button color="secondary">Secondary</Button>
<Button color="accent">Accent</Button>
```

<Alert class="mb-4">
  You can use the <CodeInline>active</CodeInline> prop to make the button appear as active (focus version of the color).
</Alert>

<SectionTitle subSection title="State colors" />

DaisyUI offers 4 state colors: `info`, `success`, `warning` and `error`.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button color="info">Info</Button>
<Button color="success">Success</Button>
<Button color="warning">Warning</Button>
<Button color="error">Error</Button>
```

<SectionTitle title="Variant" />

You can customize the button's variant by using the `variant` prop.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button variant="outline">Outline</Button>
<Button variant="ghost">Ghost</Button>
<Button variant="link">Link</Button>
```

<SectionTitle title="Size" />

You can customize the size of the button by using the `size` prop. By default,
the button is medium sized.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button size="xs">Tiny</Button>
<Button size="sm">Small</Button>
<Button size="md">Medium</Button> <!-- Default -->
<Button size="lg">Large</Button>
```

<SectionTitle title="Alignment" />

You can customize the aligment of the button by using the `aligment` prop. By default,
the button is aligned to the center.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<div class="flex flex-col gap-2">
  <Button alignment="start" wide>Start</Button>
  <Button alignment="center" wide>Center</Button> <!-- Default -->
  <Button alignment="end" wide>End</Button>
</div>
```

<SectionTitle title="Shape" />

You can customize the shape of the button by using the `shape` prop.

<Alert class="my-2" type="info">
  Note that the <CodeInline>square</CodeInline> and <CodeInline>circle</CodeInline>
  shapes give the button a 1:1 aspect ratio.
</Alert>

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button shape="square">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8h5Z"/></svg>
</Button>
<Button shape="circle">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8h5Z"/></svg>
</Button>
<Button shape="pill">Pill shape</Button>
```

<SectionTitle title="Font case" />

You can customize the font casing of the button's text by using the `fontCase` prop. 

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button fontCase="lower">Lower</Button>
<Button fontCase="normal">Normal</Button> <!-- Default -->
<Button fontCase="upper">Upper</Button>
```

<SectionTitle title="Active" />

You can customize set the button to an active state by using the `active` prop.

<Alert class="my-2" type="info">
  Note that the <CodeInline>active</CodeInline> state will do nothing on colors 
  that don't have a focus version.
</Alert>

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<div class="flex flex-col space-y-2">
  <div>
    <Button>Not active</Button>
    <Button active>Active</Button>
  </div>
  <div>
    <Button color="primary">Not active</Button>
    <Button color="primary" active>Active</Button>
  </div>
  <div>
    <Button color="secondary">Not active</Button>
    <Button color="secondary" active>Active</Button>
  </div>
  <div>
    <Button color="accent">Not active</Button>
    <Button color="accent" active>Active</Button>
  </div>
  <div>
    <Button variant="outline">Not active</Button>
    <Button variant="outline" active>Active</Button>
  </div>
  <div>
    <Button variant="ghost">Not active</Button>
    <Button variant="ghost" active>Active</Button>
  </div>
</div>
```

<SectionTitle title="Disabled" />

You can customize disabled the button by using the `disabled` prop.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button>Not Disabled</Button>
<Button disabled>Disabled</Button>
```

<SectionTitle title="Width" />

You can customize change the button's width using either the `wide` or `full` prop.

```svelte example hideScript full
<script>
  import { Button } from 'oxeye-daisy';
</script>

<div class="flex flex-col gap-2 items-center w-full">
  <Button wide>Wide (16rem)</Button>
  <Button class="w-[calc(100%-10rem)]">Custom width</Button>
  <Button full>100% of the parent width</Button>
</div>
```

<SectionTitle title="Loading" />

You can set the button to a loading state by using the `loading` prop.

<Alert class="my-2">
  I recommend using the <CodeInline>loading</CodeInline> prop with the
  <CodeInline>disabled</CodeInline> prop.
</Alert>

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<div class="flex flex-col gap-2">
  <Button>Not loading</Button>
  <Button loading>Loading</Button>
  <Button loading disabled>Loading & Disabled</Button>
</div>
```

<SectionTitle title="No animation" />

You can disable the button's animation by using the `noAnimation` prop.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button noAnimation>No animation</Button>
```

<SectionTitle title="Element" />

Sometime we need an `input` or an `a` element to be styled like a button. You can
use the `element` prop to specify the HTML element you want to use. By default,
the button is a `button` element.

<br />

We are using `{...$$restProps}` to pass all the props to the element. That way,
you can customize the button as you would with a regular HTML element.

```svelte example hideScript
<script>
  import { Button } from 'oxeye-daisy';
</script>

<Button>button</Button>
<Button element="a" href="#">a</Button>
<Button element="input" type="submit" value="input" />
<Button element="div" data-cutsom-attribute>div</Button>
```

<SectionTitle title="Props" />

<Table compact titles={['Name', 'Type', 'Default value']}>
  <PropRow
    name="color"
    type="'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error'"
  />
  <PropRow
    name="variant"
    type="'ghost' | 'link' | 'outline'"
  />
  <PropRow
    name="size"
    type="'lg' | 'md' | 'sm' | 'xs'"
  />
  <PropRow
    name="alignment"
    type="'start' | 'center' | 'end'"
  />
  <PropRow
    name="shape"
    type="'square' | 'circle' | 'pill'"
  />
  <PropRow
    name="fontCase"
    type="'normal' | 'upper' | 'lower'"
    defaultValue="normal"
  />
  <PropRow
    name="active"
    type="boolean"
    defaultValue="false"
  />
  <PropRow
    name="disabled"
    type="boolean"
    defaultValue="false"
  />
  <PropRow
    name="wide"
    type="boolean"
    defaultValue="false"
    sectionName="Width"
  />
  <PropRow
    name="block"
    type="boolean"
    defaultValue="false"
    sectionName="Width"
  />
  <PropRow
    name="loading"
    type="boolean"
    defaultValue="false"
  />
  <PropRow
    name="noAnimation"
    type="boolean"
    defaultValue="false"
  />
  <PropRow
    name="element"
    type='Any HTML element as a string ("div", "a", "input", ...)'
    defaultValue="button"
  />
</Table>

<SectionTitle title="Events" />

<SectionTitle title="Slots" />
